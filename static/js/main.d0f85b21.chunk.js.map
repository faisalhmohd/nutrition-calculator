{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","age","setAge","grams","setGrams","gramsToCalculate","lifeSpan","parseInt","className","Container","Row","Col","xs","lg","InputGroup","Prepend","Text","id","FormControl","value","aria-label","aria-describedby","onChange","e","target","Append","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAwDeA,MAlDf,WAAgB,IAAD,EACSC,mBAAS,GADlB,mBACNC,EADM,KACDC,EADC,OAEaF,mBAAS,KAFtB,mBAENG,EAFM,KAECC,EAFD,KAIPC,EAAmBF,EAAQ,GAAKA,EAAQ,GACxCG,EAAWC,SAASN,GAAOM,SAASF,GAE1C,OACE,qBAAKG,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKF,UAAU,4BAAf,SACE,eAACG,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,IAAX,UACE,sCACA,yCACA,eAACC,EAAA,EAAD,CAAYN,UAAU,OAAtB,UACE,cAACM,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWE,KAAZ,CAAiBC,GAAG,eAApB,oBAEF,cAACC,EAAA,EAAD,CACEC,MAAOlB,EACPmB,aAAW,MACXC,mBAAiB,eACjBC,SAAU,SAAAC,GAAC,OAAIrB,EAAOqB,EAAEC,OAAOL,UAEjC,cAACL,EAAA,EAAWW,OAAZ,UACE,cAACX,EAAA,EAAWE,KAAZ,CAAiBC,GAAG,eAApB,iCAGJ,eAACH,EAAA,EAAD,CAAYN,UAAU,OAAtB,UACA,cAACM,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,CAAiBC,GAAG,eAApB,qBAEF,cAACC,EAAA,EAAD,CACEC,MAAOhB,EACPiB,aAAW,QACXC,mBAAiB,eACjBC,SAAU,SAAAC,GAAC,OAAInB,EAASmB,EAAEC,OAAOL,UAEnC,cAACL,EAAA,EAAWW,OAAZ,UACE,cAACX,EAAA,EAAWE,KAAZ,CAAiBC,GAAG,eAApB,yCAGJ,qBAAIT,UAAU,SAAd,qCAA+C,+BAAOF,IAAtD,uBCpCGoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d0f85b21.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Button, Container, Row, Col, InputGroup, FormControl} from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nfunction App() {\n  const [age, setAge] = useState(2);\n  const [grams, setGrams] = useState(100);\n\n  const gramsToCalculate = grams < 20 ? grams : 20;\n  const lifeSpan = parseInt(age) + parseInt(gramsToCalculate);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col xs lg=\"6\">\n            <h5>DEMO</h5>\n            <h1>cloomis</h1>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon1\">I am</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                value={age}\n                aria-label=\"age\"\n                aria-describedby=\"basic-addon1\"\n                onChange={e => setAge(e.target.value)}\n              />\n              <InputGroup.Append>\n                <InputGroup.Text id=\"basic-addon2\">years old and </InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon1\">I eat</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                value={grams}\n                aria-label=\"grams\"\n                aria-describedby=\"basic-addon1\"\n                onChange={e => setGrams(e.target.value)}\n              />\n              <InputGroup.Append>\n                <InputGroup.Text id=\"basic-addon2\">grams of nuts per day.</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n            <h4 className=\"result\">My expected lifespan is <span>{lifeSpan}</span> years!</h4>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}